local Path = {}
Print("$$$$$$")
local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")

function Path.createPath(character, destination, settings)
    local path = PathfindingService:CreatePath(settings or {
        AgentRadius = 2,
        AgentHeight = 3,
        AgentCanJump = true,
        AgentJumpHeight = 13,
        AgentMaxSlope = 55
    })

    local startPart = character:FindFirstChild("HumanoidRootPart")
    if not startPart then
        warn("No se encontró el HumanoidRootPart en el character!")
        return nil
    end

    local success, err = pcall(function()
        path:ComputeAsync(startPart.Position, destination)
    end)
    
    if not success then
        warn("Error al calcular el camino: " .. err)
        return nil
    end
    
    return path
end

function Path.followPath(character, path)
    if path.Status ~= Enum.PathStatus.Complete then
        warn("El camino no se calculó correctamente. Estado: " .. tostring(path.Status))
        return false
    end

    local waypoints = path:GetWaypoints()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    if not humanoid then 
        warn("No se encontró Humanoid en el character!")
        return false 
    end

    local lastPosition = character.HumanoidRootPart.Position
    local timeStuck = 0
    local stuckThreshold = 3  -- 3 segundos sin movimiento

    local function isObstacleInPath()
        local ray = Ray.new(character.HumanoidRootPart.Position, character.HumanoidRootPart.CFrame.LookVector * 5)
        local hitPart, hitPosition = game.Workspace:FindPartOnRay(ray, character)
        return hitPart ~= nil
    end

    for _, waypoint in ipairs(waypoints) do
        -- Verificar si el personaje está atrapado
        if (character.HumanoidRootPart.Position - lastPosition).Magnitude < 0.1 then
            timeStuck = timeStuck + 1
        else
            timeStuck = 0  -- Reiniciar el contador si se mueve
        end

        if timeStuck >= stuckThreshold then
            print("Jugador atrapado, saltando...")
            humanoid.Jump = true  -- Hacer que salte
            timeStuck = 0  -- Reiniciar el temporizador
        end

        -- Si hay un obstáculo en el camino, recalcular el camino
        if isObstacleInPath() then
            print("Obstáculo detectado, recalculando el camino...")
            return false
        end
        
        -- Mover al siguiente waypoint
        if waypoint.Action == Enum.PathWaypointAction.Jump then
            humanoid.Jump = true
        end
        
        humanoid:MoveTo(waypoint.Position)
        humanoid.MoveToFinished:Wait()

        -- Actualizar la última posición
        lastPosition = character.HumanoidRootPart.Position
    end

    return true
end

return Path
